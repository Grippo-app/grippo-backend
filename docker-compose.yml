services:
  # ─────────────────────────────
  # 🐘 PostgreSQL
  # ─────────────────────────────
  db:
    image: postgres:15.5
    container_name: ${POSTGRES_CONTAINER_NAME}
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USERNAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE}"
        max-file: "${LOG_MAX_FILE}"

  # ─────────────────────────────
  # ⚙️ Backend (Node.js / NestJS)
  # ─────────────────────────────
  backend:
    build:
      context: ${BACKEND_BUILD_CONTEXT}
      dockerfile: ${BACKEND_DOCKERFILE}
      args:
        APP_PORT: ${BACKEND_PORT}
    container_name: ${BACKEND_CONTAINER}
    env_file: .env
    environment:
      NODE_ENV: ${APP_ENV}
      PORT: ${BACKEND_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_EXPIRATION_TIME: ${JWT_EXPIRATION_TIME}
      JWT_REFRESH_EXPIRATION_TIME: ${JWT_REFRESH_EXPIRATION_TIME}
    expose:
      - "${BACKEND_PORT}"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE}"
        max-file: "${LOG_MAX_FILE}"

    # ─────────────────────────────
  # 🌐 NGINX (local or prod)
  # ─────────────────────────────
  nginx:
    image: nginx:alpine
    container_name: ${NGINX_CONTAINER_NAME}
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - backend
    restart: unless-stopped

  # ─────────────────────────────
  # 🔒 Certbot (optional)
  # ─────────────────────────────
  certbot:
    image: certbot/certbot
    container_name: ${CERTBOT_CONTAINER_NAME}
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: /bin/sh -c
    command: >
      "trap exit TERM;
      while :; do
        certbot renew --webroot -w /var/www/certbot;
        sleep ${CERTBOT_RENEW_INTERVAL} & wait $${!};
      done"
    profiles:
      - https

volumes:
  pgdata:
